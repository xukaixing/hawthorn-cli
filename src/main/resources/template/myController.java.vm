package ${package.Controller};

    #if(${restControllerStyle})
    import org.springframework.web.bind.annotation.*;
    #else
    import org.springframework.stereotype.Controller;
    #end
    #if(${superControllerClassPackage})
    import ${superControllerClassPackage};
    #end

    #set($domainName=$!{entity})
    #set($end= $domainName.length() - 2)
    #set($domainName=$domainName.substring(0,$end)+"DTO")

    #set($dtoPackage=$!{package.Entity})
    #set($dtoPackage=$dtoPackage.replace("entity","dto"))

import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;

import ${package.Service}.${table.serviceName};
import ${cfg.packageDto}.${domainName};
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.Map;

#set($domainName=$!{entity})
#set($end = $domainName.length() - 2)
#set($controllerDomain=$domainName.substring(0,$end))
#set($domainName=$domainName.substring(0,$end)+"DTO")


#set ($camelDtoName = $!{domainName})
#set ($camelDtoName = $camelDtoName.substring(0,1).toLowerCase() + $camelDtoName.substring(1,$camelDtoName.length()))

#set ($controllerDomain = $controllerDomain.substring(0,1).toLowerCase() + $controllerDomain.substring(1,$controllerDomain.length()))


#foreach($field in ${table.fields})
    #if(${field.keyFlag})
        #set($keyPropertyType=${field.propertyType})
    #end
#end
/**
 *
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${cfg.moduleName})/${cfg.moduleName}#end/#if(${controllerMappingHyphenStyle})
    ${controllerMappingHyphen}#else${controllerDomain}#end")
    #if(${superControllerClass})
        public class ${table.controllerName} extends ${superControllerClass} {
    #else
        public class ${table.controllerName} {
    #end
    private final Logger logger=LoggerFactory.getLogger(${table.controllerName}.class);

@Autowired
public ${table.serviceName} ${controllerDomain}Service;

/**
 * 分页查询数据
 *
 * @param queryCondition 查询条件
 * @return com.baomidou.mybatisplus.core.metadata.IPage 分页对象
 * @author ${author}
 * @since ${date}
 */
@ResponseBody
@GetMapping
@SuppressWarnings("unchecked")
public IPage<Map<String, Object>>getList(@RequestParam Map<String, Object> queryCondition,@RequestParam
    ("currentPage") int currentPage,@RequestParam("pageSize") int pageSize){
    Page<Map<String, Object>>page=new Page(currentPage,pageSize);
    return ${controllerDomain}Service.selectPageBysql(page,queryCondition);
    }

/**
 * 进行数据修改
 *
 * @param id 数据主键ID
 * @return Map<String, Object> 数据对应的map 结构
 * @author ${author}
 * @since ${date}
 */
@ResponseBody
@GetMapping(value = "/{id}")
@SuppressWarnings("unchecked")
public Map<String, Object> getById(@PathVariable("id") ${keyPropertyType} id){
    return ${controllerDomain}Service.getById(id);
    }

/**
 * 进行数据新增
 *
 * @param ${camelDtoName} 需要保存的DTO
 * @return Map<String, Object> 返回的数据map
 * @author ${author}
 * @since ${date}
 */
@ResponseBody
@PostMapping
@ResponseStatus(HttpStatus.CREATED)
@SuppressWarnings("unchecked")
public Map<String, Object> insert(@RequestBody ${domainName} ${camelDtoName}){
    logger.debug("${camelDtoName}:{}",${camelDtoName});
    return ${controllerDomain}Service.insert( ${camelDtoName});
    }

/**
 * 进行数据修改
 *
 * @param id 需要修改数据的ID
 * @param ${camelDtoName} 需要保存的DTO
 * @return Map<String, Object> 返回的数据map
 * @author ${author}
 * @since ${date}
 */
@ResponseBody
@PutMapping(value = "/{id}")
@ResponseStatus(HttpStatus.CREATED)
@SuppressWarnings("unchecked")
public Map<String, Object> update(@PathVariable("id") ${keyPropertyType} id,@RequestBody ${domainName} ${camelDtoName}){
    logger.debug("${camelDtoName}:{}",${camelDtoName});
    return ${controllerDomain}Service.update(id,${camelDtoName});
    }

/**
 * 根据id删除对象
 *
 * @param id 需要修改数据的ID
 * @author ${author}
 * @since ${date}
 */
@DeleteMapping(value = "/{id}")
@ResponseStatus(HttpStatus.NO_CONTENT)
public boolean deleteById(@PathVariable("id") ${keyPropertyType} id){
    logger.debug("删除ID:{}",id);
    ${controllerDomain}Service.deleteById(id);
    return true;
    }

/**
 * 根据IDs批量删除对象
 *
 * @param ids 需要修改数据的ID集合
 * @author ${author}
 * @since ${date}
 */
@DeleteMapping(value = "/batch/{ids}")
@ResponseStatus(HttpStatus.NO_CONTENT)
public boolean deleteByIds(@PathVariable("ids") String ids){
    logger.debug("删除ID:{}",ids);
    ${controllerDomain}Service.deleteBatchIds(ids);
    return true;
    }


    }
