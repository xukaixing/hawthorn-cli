spring:
  #  profiles:
  #    active: dev
  #数据源配置
  datasource:
    #druid连接池配置，在/druid/index.html可以查看监控页
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      #初始化时建立物理连接的个数
      initial-size: 5
      #最小连接池数量
      min-idle: 5
      #最大连接池数量 maxIdle已经不再使用
      max-active: 20
      #获取连接时最大等待时间，单位毫秒
      max-wait: 60000
      #申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      test-while-idle: true
      #既作为检测的间隔时间又作为testWhileIdel执行的依据
      time-between-eviction-runs-millis: 60000
      #销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时，关闭当前连接
      min-evictable-idle-time-millis: 30000
      #用来检测连接是否有效的sql 必须是一个查询语句
      #mysql中为 select 'x'
      #oracle中为 select 1 from dual
      validation-query: select 'x'
      #申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
      test-on-borrow: false
      #归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
      test-on-return: false
      #当数据库抛出不可恢复的异常时,抛弃该连接
      #exception-sorter: true
      #是否缓存preparedStatement,mysql5.5+建议开启
      pool-prepared-statements: true
      #当值大于0时poolPreparedStatements会自动修改为true
      max-pool-prepared-statement-per-connection-size: 20
      #配置扩展插件
      filters: stat,wall,slf4j
      #通过connectProperties属性来打开mergeSql功能；慢SQL记录
      #slowSqlMillis=5000：5秒以上视为慢sql
      connection-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=1000;druid.stat.logSlowSql=true
      #合并多个DruidDataSource的监控数据
      use-global-data-source-stat: true
      #设置访问druid监控页的账号和密码,默认没有
      stat-view-servlet:
        login-username: admin
        login-password: admin123
        url-pattern: "/druid/*"
        enabled: true
      web-stat-filter:
        enabled: true
        # 添加过滤规则
        url-pattern: /*
        # 忽略过滤格式
        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"

##-------mybatis plus 配置----------------start----------------------
mybatis-plus:
  # 如果是放在src/main/java目录下 classpath:/com/yourpackage/*/mapper/*Mapper.xml
  # 如果是放在resource目录 classpath:/mapper/*Mapper.xml
  mapper-locations: classpath:/mybatis/mapper/**/*.xml
  #实体扫描，多个package用逗号或者分号分隔
  #typeAliasesPackage: com.yonyou.ccss.datacenter.dao
  global-config:
    db-config:
      db-type: mysql
      #主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID";
      id-type: AUTO
      #字段策略 0:"忽略判断",1:"非 NULL 判断"),2:"非空判断"
      field-strategy: ignored
      #驼峰下划线转换
      db-column-underline: true
      #mp2.3+ 全局表前缀 mp_
      #table-prefix: mp_
      #刷新mapper 调试神器
      refresh-mapper: true
      #数据库大写下划线转换
      #capital-mode: true
      # Sequence序列接口实现类配置
      #key-generator: com.baomidou.mybatisplus.incrementer.OracleKeyGenerator
      #逻辑删除配置（下面3个配置）
      logic-delete-value: 1
      logic-not-delete-value: 0
  #    sql-injector: com.baomidou.mybatisplus.mapper.LogicSqlInjector
  #    #自定义填充策略接口实现
  #    meta-object-handler: com.yonyou.ccss.datacenter.config.MetaObjectHandlerConfig
  configuration:
    #配置数据库column列名下划线命名返回为java实体属性的驼峰命名，自动匹配；无需as（没开启这个，SQL需要写as： select user_name as userName）
    map-underscore-to-camel-case: true
    #关闭二级缓存
    cache-enabled: false
    #配置JdbcTypeForNull, oracle数据库必须配置
    #jdbc-type-for-null: 'null'

  ##-------mybatis plus 配置----------------end----------------------

  #JPA配置
  #  jpa:
  #    database: mysql
  #    properties:
  #      hibernate:
  #        #hibernate.hbm2ddl.auto 参数的作用主要用于：自动创建、更新、验证数据库表结构，有四个值：create、create-drop、update、validate
  #        #create：每次加载 Hibernate 时都会删除上一次生成的表，然后根据 model 类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。
  #        #create-drop：每次加载 Hibernate 时根据 model 类生成表，但是 sessionFactory 一关闭，表就自动删除。
  #        #update：最常用的属性，第一次加载 Hibernate 时根据 model 类会自动建立起表的结构（前提是先建立好数据库），以后加载 Hibernate 时根据 model 类自动更新表结构，即使表结构改变了，但表中的行仍然存在，不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等应用第一次运行起来后才会。
  #        #validate ：每次加载 Hibernate 时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。
  #        hbm2ddl:
  #          auto: update
  #        #dialect 主要是指定生成表名的存储引擎为 InnoDB
  #        dialect: org.hibernate.dialect.MySQL5InnoDBDialect
  #        format_sql: true
  #    #show-sql 是否在日志中打印出自动生成的 SQL，方便调试的时候查看
  #    show-sql: true

  #thymeleaf配置
#  thymeleaf:
#    cache: false
#    prefix: classpath:/templates/
#    suffix: .html
#    mode: HTML5
#    encoding: UTF-8
#    servlet:
#      content-type: text/html
